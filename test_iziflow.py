# -*- coding: utf-8 -*-
"""test_iziflow.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HRT8ALJEhKhtkRnYJq1RgNC4GSHJ8YH4

Hola chicos! les dejo por aca el desafio tecnico de iziflow, tendran 2 horas desde el envio del mismo a sus correos para responderlo
para cada pregunta deben crear una funcion independiente (pueden nombrarla como deseen mientras se entienda a que pregunta corresponde)
al final de cada pregunta se les especifica que tipo de dato debe responder la funcion, mucha suerte !!!!
hint: ojo con la complejidad del codigo generado


-invertir string
ante un string entregado, debe invertir el orden de las palabras del mismo, se espera que la fucion generada responda un string

ejemplo:
const string = "hola mundo"
const response = "mundo hola"

- agrupacion simple
ante un arreglo de objetos, necesito agrupar este arreglo, segun una propiedad en comun de los objetos, se espera que la funcion
generada responda un objeto, la estructura interna del mismo queda a su criterio, siempre y cuando cumpla con el requisito de que los
datos esten agrupados
ejemplo:

const array = [
  {
    nombre: "matias",
    edad: 25,
    carrera" "ingenieria en informatica"
  },{
    nombre: "lukas",
    edad: 26,
    carrera" "ingenieria comercial"
  },{
    nombre: "rodrigo",
    edad: 23,
    carrera" "ingenieria comercial"
  }
]

const response = {
  "ingenieria en informatica":[
    {
      nombre: "matias",
      edad: 25,
      carrera" "ingenieria en informatica"
    }
  ],
  "ingenieria comercial":[
    {
      nombre: "lukas",
      edad: 26,
      carrera" "ingenieria comercial"
    },{
      nombre: "rodrigo",
      edad: 23,
      carrera" "ingenieria comercial"
    }
  ]
}

- encontrar el numero perdido en el arreglo
ante una arreglo de numeros entregado, que contiene numeros desde el 1 a n, debe encontrar el numero faltante del arreglo.
el arreglo no esta ordenado, aqui un ejemplo del arreglo y la respuesta a encontrar, se espera que la funcion generada responda
un integer

const array = [3,7,1,2,8,4,5]
const response = 6

- encontrar la suma
dado un arreglo de numeros y un numero, debe encontrar si dentro del arreglo, existen 2 numeros que al sumarse, de como
resultado el numero entregado, se espera que la funcion generada responda booleano
ejemplo:

const array = [5,7,1,2,8,4,3]
const number = 10

en este caso la funcion creada debe retornar true, debido a que 7 + 3, 2 + 8 suman 10

- segmentacion de string
se le entregara un arreglo de strings y un string, debe desarrollar una funcion que me permita sabes si el string entregado
puede ser segmentado en las palabras del arreglo (no todas), se espera que la funcion generada responda booleano
ejemplo:

const array = ["uno","dos","tres"]
cosnt string = "unodos"

en este caso el string puede ser segmentado con las palabras del arreglo

const array = ["uno","dos","tres"]
cosnt string = "unocinco"

en este caso el string no puede ser segmentado con las palabras del arreglo
---
"""

def invertir(arr):
  return  " ".join((arr.split()[::-1]))

print(invertir("Hola mundo"))

array = [
  {
    "nombre": "matias",
    "edad": 25,
    "carrera": "ingenieria en informatica"
  },{
    "nombre": "lukas",
    "edad": 26,
    "carrera": "ingenieria comercial"
  },{
    "nombre": "rodrigo",
    "edad": 23,
    "carrera": "ingenieria comercial"
  }
]

def agrupacion_simple(arr):
  response = {}
  for i in arr:
    if i["carrera"] in response:
      response[i["carrera"]].append(i)
    else:
      response[i["carrera"]] = [i]
  return response


print(agrupacion_simple(array))

def encontrar_num(arr):
    arr = sorted(arr)
    for i in range(len(arr) - 1):
        if arr[i] + 1 != arr[i + 1]:
            return arr[i] + 1

array = [3,7,1,2,8,4,5]

print(encontrar_num(array))
#response = 6

def encontrar_suma(arr, num):
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] + arr[j] == num:
                return True
    return False


array = [5,7,1,2,8,4,3]
number = 10


print(encontrar_suma(array, number))

def segmanetacion_string(array, _string):

  while _string != "":
    for item in array:
      if _string == "":
        return True
      if item in _string:
        _string = _string.replace(item, "")
        #return True
      else:
        return False





array = ["uno","dos","tres"]
_string = "unodos"

print(segmanetacion_string(array, _string))

#en este caso el string puede ser segmentado con las palabras del arreglo

array = ["uno","dos","tres"]
_string = "unocinco"

print(segmanetacion_string(array, _string))

#en este caso el string no puede ser segmentado con las palabras del arreglo